import discord
from discord.ext import commands
import random
import os
import asyncio

TOKEN = 'YOU TOKEN'

questions = {
    'легкий': [
        ("Что вызывает глобальное потепление?", ["А) Парниковые газы", "Б) Лесные пожары", "В) Извержения вулканов"], "А"),
        ("Какой газ вносит наибольший вклад в глобальное потепление?", ["А) Метан", "Б) Углекислый газ", "В) Азот"], "Б"),
        ("Как глобальное потепление влияет на уровень моря?", ["А) Понижает", "Б) Не влияет", "В) Повышает"], "В"),
        ("Какой ледяной континент тает быстрее всего?", ["А) Арктика", "Б) Антарктида", "В) Гренландия"], "Б"),
        ("Какое из следующих является возобновляемым источником энергии?", ["А) Уголь", "Б) Нефть", "В) Ветер"], "В"),
        ("Какой основной источник парниковых газов?", ["А) Сжигание ископаемого топлива", "Б) Землетрясения", "В) Лавины"], "А"),
        ("Что такое устойчивое развитие?", ["А) Развитие, удовлетворяющее потребности без ущерба для будущих поколений", "Б) Быстрое экономическое развитие", "В) Постоянное увеличение производства"], "А"),
        ("Какое влияние оказывает глобальное потепление на погоду?", ["А) Уменьшение осадков", "Б) Экстремальные погодные явления", "В) Стабильная погода"], "Б"),
        ("Какие страны больше всего страдают от глобального потепления?", ["А) Островные государства", "Б) Страны с холодным климатом", "В) Экваториальные страны"], "А")
    ],
    'средний': [
        ("Какой процент ученых соглашается с тем, что глобальное потепление происходит?", ["А) 50%", "Б) 75%", "В) 97%"], "В"),
        ("Какое значение для глобального потепления имеет метан?", ["А) Сильный парниковый газ", "Б) Нет влияния", "В) Ослабляет парниковый эффект"], "А"),
        ("Какая страна является крупнейшим эмитентом углекислого газа?", ["А) США", "Б) Индия", "В) Китай"], "В"),
        ("Какой год был самым теплым за всю историю наблюдений?", ["А) 2000", "Б) 2016", "В) 1998"], "Б"),
        ("Какой международный договор направлен на борьбу с изменением климата?", ["А) Киотский протокол", "Б) Парижское соглашение", "В) Монреальский протокол"], "Б"),
        ("Какой вид транспорта выделяет наибольшее количество углекислого газа?", ["А) Автомобили", "Б) Самолеты", "В) Корабли"], "А"),
        ("Какие действия могут снизить выбросы углекислого газа?", ["А) Постоянное использование кондиционеров", "Б) Посадка деревьев", "В) Увеличение промышленного производства"], "Б"),
        ("Как изменение климата влияет на биоразнообразие?", ["А) Уменьшает", "Б) Увеличивает", "В) Не влияет"], "А"),
        ("Как называется процесс поглощения углекислого газа океанами?", ["А) Океаническое поглощение", "Б) Газообмен", "В) Фотосинтез"], "А"),
        ("Какая деятельность человека наиболее сильно влияет на потепление климата?", ["А) Сельское хозяйство", "Б) Промышленность", "В) Рыболовство"], "Б")
    ],
    'сложный': [
        ("Какова роль аэрозолей в изменении климата?", ["А) Могут охлаждать и нагревать атмосферу", "Б) Только охлаждают", "В) Только нагревают"], "А"),
        ("Какая температура является критической для предотвращения катастрофического изменения климата?", ["А) 1°C", "Б) 1.5°C", "В) 2°C"], "Б"),
        ("Какая страна достигла нулевого уровня выбросов углекислого газа первой?", ["А) Коста-Рика", "Б) Швеция", "В) Бутан"], "В"),
        ("Какое животное находится под угрозой исчезновения из-за таяния арктических льдов?", ["А) Белый медведь", "Б) Пингвин", "В) Тюлень"], "А"),
        ("Какой газ является основным компонентом озонового слоя?", ["А) Азот", "Б) Озон", "В) Кислород"], "Б"),
        ("Какой процесс позволяет лесам поглощать углекислый газ?", ["А) Гниение", "Б) Фотосинтез", "В) Испарение"], "Б"),
        ("Как называется международная программа по торговле выбросами углекислого газа?", ["А) Киотский протокол", "Б) Монреальский протокол", "В) Парижское соглашение"], "А"),
        ("Какое животное наиболее чувствительно к изменению климата в арктических регионах?", ["А) Пингвин", "Б) Тюлень", "В) Морж"], "Б"),
        ("Какова цель Парижского соглашения по ограничению потепления?", ["А) Менее 1°C", "Б) Менее 1.5°C", "В) Менее 2°C"], "В"),
        ("Какой природный процесс может способствовать потеплению планеты?", ["А) Лесные пожары", "Б) Извержение вулканов", "В) Наводнения"], "Б")
    ]
}

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents)

# Хранилище для текущих вопросов пользователя
user_data = {}

@bot.event
async def on_ready():
    print(f'Мы вошли как {bot.user}')

@bot.command(name='меню')
async def menu(ctx):
    commands_list = (
        "**/начать_викторину <сложность>** - Начать викторину. Уровни сложности: легкий, средний, сложный.\n"
        "**/помощь** - Показать список команд.\n"
        "**/стоп** - Остановить текущую викторину."
    )
    await ctx.send(f"Список команд:\n{commands_list}")

@bot.command(name='помощь')
async def help(ctx):
    await menu(ctx)

@bot.command(name='начать_викторину')
async def start_quiz(ctx, difficulty: str):
    # Проверяем, доступен ли указанный уровень сложности
    if difficulty not in questions:
        await ctx.send(f"Уровень сложности '{difficulty}' не существует. Выберите из: легкий, средний, сложный.")
        return

    # Выбираем случайные вопросы из списка соответствующего уровня сложности
    num_questions = min(10, len(questions[difficulty]))
    selected_questions = random.sample(questions[difficulty], num_questions)

    # Сохраняем данные пользователя
    user_data[ctx.author.id] = {
        'questions': selected_questions,
        'current_question': 0,
        'score': 0
    }

    # Стартуем викторину для автора сообщения
    await ctx.send(f"Викторина начата для {ctx.author.mention}! Ответьте на вопросы, написав номер варианта ответа.")
    
    # Задаем первый вопрос
    await ask_question(ctx, ctx.author.id)

@bot.command(name='стоп')
async def stop_quiz(ctx):
    if ctx.author.id in user_data:
        del user_data[ctx.author.id]
        await ctx.send("Викторина остановлена.")
    else:
        await ctx.send("У вас нет активной викторины.")

async def ask_question(ctx, user_id):
    user = user_data[user_id]
    question, options, answer = user['questions'][user['current_question']]
    await ctx.send(f"**Вопрос {user['current_question'] + 1}:** {question}")
    for i, option in enumerate(options, start=1):
        await ctx.send(f"{i}. {option}")

    def check(m):
        return m.author.id == user_id and m.channel == ctx.channel

    try:
        response = await bot.wait_for('message', check=check, timeout=30.0)
    except asyncio.TimeoutError:
        await ctx.send('Время истекло! Викторина завершена.')
        del user_data[user_id]
        return

    if response.content.strip().upper() == answer:
        user['score'] += 1
        await ctx.send('Правильно!')
    else:
        await ctx.send(f'Неправильно. Правильный ответ: {answer}')

    user['current_question'] += 1

    if user['current_question'] < len(user['questions']):
        await ask_question(ctx, user_id)
    else:
        await ctx.send(f"Викторина завершена! Вы ответили правильно на {user['score']} из {len(user['questions'])} вопросов.")
        del user_data[user_id]

bot.run(TOKEN)
